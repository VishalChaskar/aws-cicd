name: CI/CD Pipeline for Terraform, Ansible, and Docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Terraform Job
  terraform:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Terraform
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update
          sudo apt-get install terraform

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform
        run: terraform apply -auto-approve

      - name: Capture EC2 Instance IP
        run: |
          echo "$(terraform output -raw instance_ip)" > instance_ip.txt
          
      - name: Upload EC2 IP as artifact
        uses: actions/upload-artifact@v3
        with:
          name: instance-ip
          path: instance_ip.txt

  # Ansible Job
  ansible:
    runs-on: ubuntu-latest
    needs: terraform  # Ensure this job runs only after terraform job completes

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository --yes --update ppa:ansible/ansible
          sudo apt install -y ansible

      - name: Install Docker
        run: |
          sudo apt update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

      - name: Download EC2 IP from Terraform artifact
        uses: actions/download-artifact@v3
        with:
          name: instance-ip
          
      - name: Read EC2 IP from file
        id: instance_ip
        run: |
          INSTANCE_IP=$(cat instance_ip.txt)
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV

      # Set up the Ansible inventory file dynamically
      - name: Set up Ansible inventory file
        run: |
          echo "[aws_servers]" > inventory.ini
          echo "${{ env.INSTANCE_IP }} ansible_user=ec2-user ansible_ssh_private_key_file=my-key-pair.pem ansible_ssh_extra_args='-o StrictHostKeyChecking=no -o KbdInteractiveAuthentication=no -o PreferredAuthentications=publickey -o PasswordAuthentication=no'" >> inventory.ini

      - name: Debug Inventory File (optional)
        run: cat inventory.ini

      - name: Run Ansible playbook
        run: ansible-playbook -i inventory.ini deploy.yml

  # Docker Job
  docker:
    runs-on: ubuntu-latest
    needs: ansible  # Ensures this job runs only after the ansible job completes

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker
        run: |
          sudo apt update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

      - name: Build Docker image
        run: |
          docker build -t nginx-image -f Dockerfile .

      - name: Run Docker container
        run: |
          docker run -d -p 80:80 nginx-image

  # Optionally, Upload inventory.ini as artifact for inspection
  upload-artifacts:
    runs-on: ubuntu-latest
    needs: ansible

    steps:
      - name: Upload inventory.ini as artifact
        uses: actions/upload-artifact@v3
        with:
          name: inventory-file
          path: inventory.ini
