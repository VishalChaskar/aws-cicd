name: CI/CD Pipeline for Terraform, Ansible, and Docker

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the 'main' branch.
  pull_request:
    branches:
      - main  # Trigger the workflow on pull requests to the 'main' branch.

jobs:
  # Terraform Job
  terraform:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Terraform
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update
          sudo apt-get install terraform

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform
        run: terraform apply -auto-approve

      - name: Output EC2 Instance IP
        id: terraform
        run: |
          # Store the instance IP as an output environment variable
          echo "instance_ip=$(terraform output -raw instance_ip)" >> $GITHUB_ENV
          echo "EC2 Instance IP: ${{ env.instance_ip }}"  # Debugging output to check the IP

  # Ansible Job
  ansible:
    runs-on: ubuntu-latest

    needs: terraform  # Ensures this job runs only after the terraform job completes

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository --yes --update ppa:ansible/ansible
          sudo apt install -y ansible

      - name: Install Docker (for running the playbook)
        run: |
          sudo apt update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

      # Set up the Ansible inventory file dynamically
      - name: Set up Ansible inventory file
        run: |
          echo "[aws_servers]" > inventory.ini
          echo "${{ env.instance_ip }} ansible_user=ec2-user ansible_ssh_private_key_file=my-key-pair.pem ansible_ssh_extra_args='-o StrictHostKeyChecking=no -o KbdInteractiveAuthentication=no -o PreferredAuthentications=publickey -o PasswordAuthentication=no'" >> inventory.ini

      - name: Debug Inventory File (optional)
        run: cat inventory.ini

      - name: Run Ansible playbook
        run: ansible-playbook -i inventory.ini deploy.yml

  # Docker Job
  docker:
    runs-on: ubuntu-latest

    needs: ansible  # Ensures this job runs only after the ansible job completes

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker
        run: |
          sudo apt update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

      - name: Build Docker image
        run: |
          docker build -t nginx-image -f Dockerfile .

      - name: Run Docker container
        run: |
          docker run -d -p 80:80 nginx-image

  # Optionally, Upload inventory.ini as artifact for inspection
  upload-artifacts:
    runs-on: ubuntu-latest

    needs: ansible

    steps:
      - name: Upload inventory.ini as artifact
        uses: actions/upload-artifact@v3
        with:
          name: inventory-file
          path: inventory.ini
